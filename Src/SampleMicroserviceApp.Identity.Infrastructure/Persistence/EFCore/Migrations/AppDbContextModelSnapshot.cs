// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SampleMicroserviceApp.Identity.Infrastructure.Persistence.EFCore;

#nullable disable

namespace SampleMicroserviceApp.Identity.Infrastructure.Persistence.EFCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.Application.ApplicationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppType")
                        .HasColumnType("int");

                    b.Property<string>("BaseAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RelatedApps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("IsArchived = 0");

                    b.ToTable("Applications", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppType = 20,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Identity service which contains apps, users, roles, claims and handles permissions",
                            IsActive = true,
                            IsArchived = false,
                            IsPublic = true,
                            Key = "Identity",
                            Title = "احراز هویت"
                        });
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.Claim.ClaimEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("IsArchived = 0");

                    b.ToTable("Claims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationId = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            Key = "Identity_User_ViewAll",
                            Title = "Identity_User_ViewAll"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationId = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            Key = "Identity_User_Manage",
                            Title = "Identity_User_Manage"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationId = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            Key = "Identity_Role_ViewAll",
                            Title = "Identity_Role_ViewAll"
                        },
                        new
                        {
                            Id = 4,
                            ApplicationId = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            Key = "Identity_Role_Manage",
                            Title = "Identity_Role_Manage"
                        },
                        new
                        {
                            Id = 5,
                            ApplicationId = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            Key = "Identity_Application_ViewAll",
                            Title = "Identity_Application_ViewAll"
                        },
                        new
                        {
                            Id = 6,
                            ApplicationId = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            Key = "Identity_Application_Manage",
                            Title = "Identity_Application_Manage"
                        },
                        new
                        {
                            Id = 7,
                            ApplicationId = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            Key = "Identity_Permission_LoginAsSomeoneElse",
                            Title = "Identity_Permission_LoginAsSomeoneElse"
                        });
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.Role.RoleClaimEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("RoleId", "ClaimId")
                        .IsUnique()
                        .HasFilter("IsArchived = 0");

                    b.ToTable("RoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimId = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimId = 2,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaimId = 3,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClaimId = 4,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            ClaimId = 5,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            ClaimId = 6,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            ClaimId = 7,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.Role.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("IsArchived = 0");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationId = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            Key = "Identity_Administrator",
                            Title = "Identity Administrator"
                        });
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.User.RefreshTokenHistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "CreatedAt")
                        .IsUnique()
                        .HasFilter("IsArchived = 0");

                    b.ToTable("RefreshTokensHistory", (string)null);
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.User.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BoxId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Dismissed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EmployedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmploymentType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoggedIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentBoxId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordSetAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PersonnelCode")
                        .HasColumnType("int");

                    b.Property<string>("PostTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RahkaranId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserSource")
                        .HasColumnType("int");

                    b.Property<string>("WorkLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkLocationCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dismissed = false,
                            FirstName = "رامین",
                            FullName = "رامین یزدانی",
                            IsArchived = false,
                            IsRegistered = false,
                            LastName = "یزدانی",
                            Mobile = "09195159945",
                            TwoFactorEnabled = false,
                            UserSource = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dismissed = false,
                            FirstName = "فرشاد",
                            FullName = "فرشاد داودی",
                            IsArchived = false,
                            IsRegistered = false,
                            LastName = "داودی",
                            Mobile = "0119029198",
                            TwoFactorEnabled = false,
                            UserSource = 2
                        });
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.User.UserRahkaranViewEntity", b =>
                {
                    b.Property<int?>("RahkaranId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BoxId")
                        .HasColumnType("int");

                    b.Property<bool>("Dismissed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EmployedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmploymentType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentBoxId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonnelCode")
                        .HasColumnType("int");

                    b.Property<string>("PostTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkLocationCode")
                        .HasColumnType("int");

                    b.HasKey("RahkaranId");

                    b.ToTable((string)null);

                    b.ToView("UsersRahkaranView", (string)null);
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.User.UserRoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasFilter("IsArchived = 0");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsArchived = false,
                            RoleId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.Claim.ClaimEntity", b =>
                {
                    b.HasOne("SampleMicroserviceApp.Identity.Domain.Entities.Application.ApplicationEntity", "Application")
                        .WithMany("Claims")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.Role.RoleClaimEntity", b =>
                {
                    b.HasOne("SampleMicroserviceApp.Identity.Domain.Entities.Claim.ClaimEntity", "Claim")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SampleMicroserviceApp.Identity.Domain.Entities.Role.RoleEntity", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.Role.RoleEntity", b =>
                {
                    b.HasOne("SampleMicroserviceApp.Identity.Domain.Entities.Application.ApplicationEntity", "Application")
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.User.RefreshTokenHistoryEntity", b =>
                {
                    b.HasOne("SampleMicroserviceApp.Identity.Domain.Entities.User.UserEntity", "User")
                        .WithMany("RefreshTokenHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.User.UserRoleEntity", b =>
                {
                    b.HasOne("SampleMicroserviceApp.Identity.Domain.Entities.Role.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SampleMicroserviceApp.Identity.Domain.Entities.User.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.Application.ApplicationEntity", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.Claim.ClaimEntity", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.Role.RoleEntity", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SampleMicroserviceApp.Identity.Domain.Entities.User.UserEntity", b =>
                {
                    b.Navigation("RefreshTokenHistory");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
